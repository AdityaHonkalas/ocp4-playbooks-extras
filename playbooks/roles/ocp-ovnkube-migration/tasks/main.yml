---
- name: Take backup of the network operator
  shell: 'oc get Network.config.openshift.io cluster -o yaml > cluster-openshift-sdn.yaml'

- name: Annotate the network operator
  shell: 'oc annotate --overwrite Network.operator.openshift.io cluster networkoperator.openshift.io/network-migration=""'
  register: annotate
  ignore_errors: true
- debug:
    msg: "the return value of annotate was {{ annotate }}"

- name: Stop the master configuration pool
  shell: |
     oc patch MachineConfigPool master --type='merge' --patch \
     '{ "spec": { "paused": true } }'

- name: Stop the worker configuration pool
  shell: |
     oc patch MachineConfigPool worker  --type='merge' --patch \
     '{ "spec": { "paused": true } }'

- name: Wait until the Multus daemon set pods restart
  shell: |
     oc -n openshift-multus rollout status daemonset/multus
  register: pod_restart_status
  until: pod_restart_status.stdout is search("successfully rolled out")
  retries: 5
  delay: 5

- name: To change default CNI network provider
  shell: |
     oc patch Network.config.openshift.io cluster \
     --type='merge' --patch '{ "spec": { "networkType": "OVNKubernetes" } }'

- name: Register ocp nodes hostname
  shell: oc get nodes  -o jsonpath='{.items[*].status.addresses[?(@.type=="Hostname")].address}'
  register: nodes

- name: Reboot nodes to apply changes
  shell: |
    for hostname in {{ nodes.stdout }}; do
      ssh -o StrictHostKeyChecking=no core@${hostname} sudo shutdown -r -t 3
      sleep 2m
      export nodestatus=$(oc get nodes | grep ${hostname} | grep -w Ready | wc -l)
      count=0
      while [[ ${nodestatus} -ne 1 ]]
      do
        sleep 20s
        nodestatus=$(oc get nodes | grep ${hostname} | grep -w Ready | wc -l)
        if [[ ${count} -eq 15 ]]
        then
         exit;
        fi
      done
    done
  args:
    executable: /bin/bash

- name: Start the master configuration pool
  shell: |
     oc patch MachineConfigPool master --type='merge' --patch \
     '{ "spec": { "paused": false } }'

- name: Waiting for Start the master configuration pool to complete
  shell: |
     oc get pods --all-namespaces | grep -w -v 'Running\|Completed' | wc -l
  register: operand_count
  until: operand_count.stdout|int != 0
  retries: 5
  delay: 30

- name: Start the worker configuration pool
  shell: |
     oc patch MachineConfigPool worker  --type='merge' --patch \
     '{ "spec": { "paused": false } }'

- name: Waiting for Start the worker configuration pool to complete
  shell: |
     oc get pods --all-namespaces | grep -w -v 'Running\|Completed' | wc -l
  register: operand_count
  until: operand_count.stdout|int != 0
  retries: 5
  delay: 30

- name: check if machineconfigpool in updated state
  shell:  oc get machineconfigpool -n openshift-machine-config-operator --no-headers | awk '{ print $3 $4 $5 }' | grep -w  -v TrueFalseFalse  |  wc -l
  register: machineconfigpool_status
- debug:
    msg: "Some machineconfigpool not updated"
  failed_when: 0 != machineconfigpool_status.stdout|int

- name: Check network provider plugin
  shell: oc get network.config/cluster -o jsonpath='{.status.networkType}{"\n"}'
  register: network_provider
- debug:
    msg: "{{ network_provider.stdout }}"
  failed_when: network_provider.rc != 0 or "OVNKubernetes" not in network_provider.stdout

- name: Remove the annotation added previously on the network operator
  shell: 'oc annotate Network.operator.openshift.io cluster networkoperator.openshift.io/network-migration-'

- name: Delete the openshift sdn namespace
  shell: 'oc delete namespace openshift-sdn'

- name: Check the new namespace and ovn pods
  shell: 'oc get pods -n openshift-ovn-kubernetes'
  register: check_ovn_pod_status
- debug:
    msg: "{{ check_ovn_pod_status.stdout_lines }}"

- name: Copy nginx deployment file
  copy:
    src: "{{ file_src }}"
    dest: "{{ file_dest }}"

- name: Deploy nginx deployment file
  shell: oc apply -f "{{ file_dest }}"
- name: Wait for nginx pods to come up
  wait_for:
    delay: 10

- name: Check the new pods after NGINX deployment
  shell: 'oc get pods -o wide'
  register: check_ovn_pod_status
- debug:
    msg: "{{ check_ovn_pod_status.stdout_lines }}"

- name: check if all CO are in AVAILABLE state
  shell:  oc get co  | awk '{ print $3}' | grep -v AVAILABLE | grep False | wc -l
  register: co_status

- name: check if CO are not in Progressing and Available state
  shell:  oc get co  | awk '{ print $4}' | grep -v PROGRESSING | grep True | wc -l
  register: co_progress_status
- debug:
    msg: "Some CO not in good state {{ check_ovn_pod_status.stdout_lines }}"
  when: 0 < co_progress_status.stdout|int or  0 < co_status.stdout|int
